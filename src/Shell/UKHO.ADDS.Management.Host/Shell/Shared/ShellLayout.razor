@using System.Globalization
@using UKHO.ADDS.Management.Shell.Models
@using UKHO.ADDS.Management.Shell.Services
@inherits LayoutComponentBase

@inject ModulePageService DashboardPageService
@inject NavigationManager NavManager

<RadzenComponents />

<RadzenLayout Style="grid-template-columns: auto 1fr auto; grid-template-areas: 'rz-header rz-header rz-header' 'rz-sidebar rz-body rz-config-sidebar'">
    <RadzenHeader>
        <ChildContent>
            <RadzenRow AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start" Gap="0px">
                <RadzenColumn Size="5">
                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center">
                        <RadzenSidebarToggle Click="@(() => _sidebarExpanded = !_sidebarExpanded)" />
                        <span style="overflow: hidden; white-space: nowrap; text-overflow: ellipsis;">UKHO ADDS Mock Dashboard</span>
                    </RadzenStack>
                </RadzenColumn>
                <RadzenColumn Size="7">
                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End">
                        <div class="rz-display-none rz-display-sm-inline-flex align-items-center">
                            <RadzenButton Text="Logout"
                                          Class="rz-text-nowrap rz-mx-2 rz-mx-lg-4"
                                          Click="@OnLogoutClicked" />
                        </div>
                    </RadzenStack>
                </RadzenColumn>
            </RadzenRow>
        </ChildContent>
    </RadzenHeader>

    <RadzenBody @ref="_body0" style="background-color: #15171C;">
        <ChildContent>
            <RadzenContentContainer Name="main" style="width: 100%; height: 100%; border: none; margin: 0; padding: 0; overflow: hidden;">
                @Body
            </RadzenContentContainer>
        </ChildContent>
    </RadzenBody>

    <RadzenSidebar @ref="_sidebar0" @bind-Expanded="@_sidebarExpanded" class="demos-sidebar" style="display: flex; flex-direction: column">
        <div style="flex: 1; overflow: auto">
            <RadzenPanelMenu Match="NavLinkMatch.Prefix">
                @foreach (var category in _pages)
                {
                    <NavigationItem @key=category @bind-Expanded=@category.Expanded Example=@category>
                        @if (category.Children != null)
                        {
                            @foreach (var example in category.Children)
                            {
                                if (example.Children != null)
                                {
                                    <NavigationItem @key=example @bind-Expanded=@example.Expanded Example=@example>
                                        @foreach (var child in example.Children)
                                        {
                                            <NavigationItem @key=child @bind-Expanded=@child.Expanded Example=@child />
                                        }
                                    </NavigationItem>
                                }
                                else
                                {
                                    <NavigationItem @key=example @bind-Expanded=@example.Expanded Example=@example />
                                }
                            }
                        }
                    </NavigationItem>
                }
            </RadzenPanelMenu>
        </div>
    </RadzenSidebar>
</RadzenLayout>

@if (!_rendered)
{
    <div class="rz-app-loading">
        <div class="logo-loading"></div>
    </div>
}

@code {
    private RadzenSidebar _sidebar0;
    private RadzenBody _body0;
    private bool _sidebarExpanded = true;
    private bool _rendered;
    private IEnumerable<ModulePage> _pages;
    private ModulePage _page;

    protected override void OnInitialized()
    {
        _pages = DashboardPageService.Pages;

        NavManager.LocationChanged += OnLocationChanged;
        _page = DashboardPageService.FindCurrent(new Uri(NavManager.Uri));

        Thread.CurrentThread.CurrentCulture = new CultureInfo("en-GB");
    }

    private void OnLocationChanged(object sender, Microsoft.AspNetCore.Components.Routing.LocationChangedEventArgs args)
    {
        var currentExample = DashboardPageService.FindCurrent(new Uri(args.Location));
        if (currentExample != _page)
        {
            _page = currentExample;
            StateHasChanged();
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            _rendered = true;
        }
    }

    private void OnLogoutClicked()
    {
        // Full-page redirect so the middleware can issue the SignOutResult → 302 to Keycloak
        NavManager.NavigateTo("/authentication/logout", forceLoad: true);
    }
}
